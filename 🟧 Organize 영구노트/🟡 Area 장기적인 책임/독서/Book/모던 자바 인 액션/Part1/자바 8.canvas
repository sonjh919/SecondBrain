{
	"edges":[
		{"id":"54ca5e444e46bc74","fromNode":"80f008e607bacfc5","fromSide":"bottom","toNode":"90caaf7c182eedab","toSide":"top","color":"4","label":"자바의 진화 방향"},
		{"id":"a6d800ffbc111dae","fromNode":"90caaf7c182eedab","fromSide":"bottom","toNode":"a173f76f64d3e041","toSide":"top","color":"4","label":"자바 8의 3가지 프로그래밍 개념"},
		{"id":"36a83e67d6da4c16","fromNode":"90caaf7c182eedab","fromSide":"bottom","toNode":"467da38b756aa57e","toSide":"top","color":"4"},
		{"id":"0fa8a9a5f2fc04f8","fromNode":"90caaf7c182eedab","fromSide":"bottom","toNode":"688f8555045ea591","toSide":"top","color":"4"},
		{"id":"a9135cd1d12f5a0f","fromNode":"467da38b756aa57e","fromSide":"bottom","toNode":"73bb7321a5f883a7","toSide":"top","color":"4"},
		{"id":"94293cf53895aa0b","fromNode":"a173f76f64d3e041","fromSide":"bottom","toNode":"e667302364e7e4c8","toSide":"top","color":"4"},
		{"id":"ad329dbcfee6df06","fromNode":"688f8555045ea591","fromSide":"bottom","toNode":"2eef4f47c40ee434","toSide":"top","color":"4"},
		{"id":"06aa6b4d24ad6b96","fromNode":"73bb7321a5f883a7","fromSide":"bottom","toNode":"ea3c57c62f34b533","toSide":"top","color":"4"},
		{
			"id":"9a29cae0d99f23cb",
			"styleAttributes":{},
			"fromNode":"ea3c57c62f34b533",
			"fromSide":"bottom",
			"toNode":"50ef9f40314746b4",
			"toSide":"top",
			"color":"4",
			"label":"녹색 사과를 필터링하고 싶어!"
		},
		{
			"id":"14ad1975d56559e2",
			"styleAttributes":{},
			"fromNode":"50ef9f40314746b4",
			"fromSide":"bottom",
			"toNode":"db9f263244ca6448",
			"toSide":"top",
			"color":"4",
			"label":"빨간 사과도 필터링하고 싶어!"
		},
		{
			"id":"1363fdbfbc08bc01",
			"styleAttributes":{},
			"fromNode":"db9f263244ca6448",
			"fromSide":"bottom",
			"toNode":"ef6f29101d75d110",
			"toSide":"top",
			"color":"1",
			"label":"\"색 이외에도 가벼운 사과와 무거운 사과로 구분하면 좋겠네요. 무게가 150g 이상이면 무거운 사과입니다!\""
		},
		{
			"id":"6e630884e24cb043",
			"styleAttributes":{},
			"fromNode":"db9f263244ca6448",
			"fromSide":"bottom",
			"toNode":"dd0aca3c8d8596e6",
			"toSide":"top",
			"color":"4",
			"label":"동작 파라미터화"
		},
		{
			"id":"16bce024917fc451",
			"styleAttributes":{},
			"fromNode":"dd0aca3c8d8596e6",
			"fromSide":"bottom",
			"toNode":"74e49037daf80bbf",
			"toSide":"top",
			"color":"4",
			"label":"새로운 동작 추가: 인터페이스를 구현하는 여러 클래스를 정의한 다음 인스턴스화 → 번거로움&많은 공간&로직과 관련 없는 코드 등등.."
		},
		{
			"id":"9282f65eb65f26eb",
			"styleAttributes":{},
			"fromNode":"74e49037daf80bbf",
			"fromSide":"bottom",
			"toNode":"f7ac2d06371c2c5c",
			"toSide":"top",
			"color":"4",
			"label":"여전히 많은 공간, 익숙하지 않은 사용"
		},
		{
			"id":"2e662edf3bc00f40",
			"styleAttributes":{},
			"fromNode":"f7ac2d06371c2c5c",
			"fromSide":"bottom",
			"toNode":"874c69e586d4842f",
			"toSide":"top",
			"color":"2",
			"label":"추상화"
		},
		{
			"id":"8f2583e00031391a",
			"styleAttributes":{},
			"fromNode":"f7ac2d06371c2c5c",
			"fromSide":"right",
			"toNode":"a783ef7b8833534c",
			"toSide":"left",
			"color":"4",
			"label":"람다?"
		},
		{
			"id":"c47639ee24567a02",
			"styleAttributes":{},
			"fromNode":"dd0aca3c8d8596e6",
			"fromSide":"right",
			"toNode":"9699b8fde07406ef",
			"toSide":"left",
			"color":"2"
		},
		{
			"id":"f8912b1b25429a7c",
			"styleAttributes":{},
			"fromNode":"a783ef7b8833534c",
			"fromSide":"bottom",
			"toNode":"9699b8fde07406ef",
			"toSide":"top",
			"color":"4",
			"label":"함수형 인터페이스?"
		},
		{
			"id":"6d7383146e32e331",
			"styleAttributes":{},
			"fromNode":"9699b8fde07406ef",
			"fromSide":"bottom",
			"toNode":"a7cb215d41804c76",
			"toSide":"top",
			"color":"4"
		},
		{
			"id":"fa6185bf3219756d",
			"styleAttributes":{},
			"fromNode":"874c69e586d4842f",
			"fromSide":"bottom",
			"toNode":"a13c58433d643889",
			"toSide":"top",
			"color":"5",
			"label":"제네릭 메서드?"
		},
		{
			"id":"8fa43b37503e4411",
			"styleAttributes":{},
			"fromNode":"a7cb215d41804c76",
			"fromSide":"left",
			"toNode":"a13c58433d643889",
			"toSide":"right",
			"color":"5",
			"label":"타입 매개변수?"
		},
		{
			"id":"1970258bcf28b275",
			"styleAttributes":{},
			"fromNode":"a13c58433d643889",
			"fromSide":"bottom",
			"toNode":"676d27f47d050116",
			"toSide":"top",
			"color":"5",
			"label":"제네릭 메서드?"
		},
		{
			"id":"2924a2878668b4ad",
			"styleAttributes":{},
			"fromNode":"9699b8fde07406ef",
			"fromSide":"bottom",
			"toNode":"5e50b361c696985c",
			"toSide":"top",
			"color":"4"
		},
		{
			"id":"cbf9d5a801e2b27d",
			"styleAttributes":{},
			"fromNode":"a783ef7b8833534c",
			"fromSide":"right",
			"toNode":"ad09972374552e9d",
			"toSide":"left",
			"color":"2",
			"label":"깔끔한 람다"
		},
		{
			"id":"e8ec65ae0ceee854",
			"styleAttributes":{},
			"fromNode":"5e50b361c696985c",
			"fromSide":"right",
			"toNode":"0119aca709d9c01b",
			"toSide":"left",
			"color":"4",
			"label":"사과를 무게로 정렬"
		},
		{
			"id":"67015426987e20d8",
			"styleAttributes":{},
			"fromNode":"3d68285b857eb33a",
			"fromSide":"top",
			"toNode":"ad09972374552e9d",
			"toSide":"bottom",
			"color":"4",
			"label":"메서드 참조?"
		},
		{
			"id":"9fa0784152d8ab7c",
			"styleAttributes":{},
			"fromNode":"0119aca709d9c01b",
			"fromSide":"right",
			"toNode":"c814da86ae67eb64",
			"toSide":"left",
			"color":"4",
			"label":"리팩터링"
		},
		{
			"id":"2efc9d176aa5ba3c",
			"styleAttributes":{},
			"fromNode":"c814da86ae67eb64",
			"fromSide":"right",
			"toNode":"3d68285b857eb33a",
			"toSide":"left",
			"color":"4",
			"label":"축약"
		},
		{
			"id":"71761186c03d415c",
			"styleAttributes":{},
			"fromNode":"3d68285b857eb33a",
			"fromSide":"bottom",
			"toNode":"bf7905c8d671f2e2",
			"toSide":"top",
			"color":"4",
			"label":"무게가 같다면 국가별로 정렬"
		},
		{
			"id":"9baf7fc3111e3f2f",
			"styleAttributes":{},
			"fromNode":"a7cb215d41804c76",
			"fromSide":"right",
			"toNode":"bf7905c8d671f2e2",
			"toSide":"left",
			"color":"2",
			"label":"추가 메서드?"
		}
	],
	"metadata":{},
	"nodes":[
		{
			"id":"fc6fe90c51a9d7ff",
			"styleAttributes":{},
			"type":"group",
			"x":620,
			"y":3500,
			"width":4155,
			"height":1725,
			"label":"CHAPTER 3 람다 표현식"
		},
		{
			"id":"23f6b0fad95b3927",
			"styleAttributes":{},
			"type":"group",
			"x":-1400,
			"y":1040,
			"width":1945,
			"height":3417,
			"label":"CHAPTER 2 동작 파라미터화"
		},
		{
			"id":"5e45897980d618c6",
			"styleAttributes":{},
			"type":"group",
			"x":-620,
			"y":-680,
			"width":858,
			"height":1647,
			"label":"CHAPTER 1 자바의 변화"
		},
		{
			"id":"a173f76f64d3e041",
			"styleAttributes":{},
			"text":"[[🟧 Organize 영구노트/🟡 Area 장기적인 책임/독서/Book/모던 자바 인 액션/Part1/stream|stream]]\n\n우리가 하려는 작업을 db 질의처럼 **고수준으로 추상화**하여 일련의 스트림으로 만들어 처리 가능\n\n**쓰레드를 사용하지 않고 공짜로 병렬성 획득 가능**",
			"type":"text",
			"x":-305,
			"y":0,
			"width":220,
			"height":300
		},
		{
			"id":"467da38b756aa57e",
			"styleAttributes":{},
			"text":"[[동작 파라미터화]]\n\n메서드를 다른 메서드의 인수로 넘겨주는 기능.\n**연산의 동작을 파라미터화.**\n\n→ [[🟧 Organize 영구노트/🟡 Area 장기적인 책임/독서/Book/모던 자바 인 액션/Part1/함수형 인터페이스|함수형 인터페이스]]\n\n\n",
			"type":"text",
			"x":-580,
			"y":0,
			"width":235,
			"height":220
		},
		{
			"id":"688f8555045ea591",
			"styleAttributes":{},
			"text":"병렬성과 공유 가변 데이터\n\n병렬성을 공짜로 얻기.\n공유되지 않은 가변 데이터를 다른 메서드로 전달하는 함수형 인터페이스.",
			"type":"text",
			"x":-40,
			"y":0,
			"width":232,
			"height":200
		},
		{
			"id":"90caaf7c182eedab",
			"styleAttributes":{},
			"text":"\n1. **병렬 실행 환경**을 쉽게 관리\n2. 에러가 덜 발생하는 방향\n3. **간결한 코드**\n4. **함수형 프로그래밍**",
			"type":"text",
			"x":-335,
			"y":-320,
			"width":280,
			"height":160
		},
		{
			"id":"80f008e607bacfc5",
			"styleAttributes":{},
			"text":"#### 자바 8  이전\n1. 다른 코어를 활용하기 위해 쓰레드 사용이 필요 \n\t→ **멀티코어 프로세싱** 대응의 어려움\n2. **간결하지 않은 코드**\n3. **값 변화**에 집중",
			"type":"text",
			"x":-335,
			"y":-660,
			"width":280,
			"height":240
		},
		{
			"id":"ea3c57c62f34b533",
			"styleAttributes":{},
			"text":"동작 파라미터화\n\n+ 동작을 파라미터화\n+ 코드 블록의 실행은 나중으로\n\n→ **변화하는 요구사항에 유연한 대응** 가능\n\n",
			"type":"text",
			"x":-729,
			"y":1063,
			"width":329,
			"height":197
		},
		{
			"id":"db9f263244ca6448",
			"styleAttributes":{},
			"text":"#### 두 번째 시도 : 색을 파라미터화\n\n```java\npublic static List<Apple> filterGreenApples(List<Apple> inventory, Color color) {\n\tList<Apple> result = new ArrayList<>();\n\tfor(Apple apple: inventory){\n\t\tif(apple.getColor().equals(color)){\n\t\t\tresult.add(apple);\n\t\t}\n\t}\n\treturn result;\n}\n```\n",
			"type":"text",
			"x":-1375,
			"y":1820,
			"width":800,
			"height":320
		},
		{
			"id":"50ef9f40314746b4",
			"styleAttributes":{},
			"text":"#### 첫 번째 시도 : 녹색 사과 필터링\n\n```java\nenum Color { RED, GREEN }\n\npublic static List<Apple> filterGreenApples(List<Apple> inventory) {\n\tList<Apple> result = new ArrayList<>(); // 사과 누적 리스트\n\tfor(Apple apple: inventory){\n\t\tif(GREEN.equals(apple.getColor()){ // 녹색 사과만 선택\n\t\t\tresult.add(apple);\n\t\t}\n\t}\n\treturn result;\n}\n```",
			"type":"text",
			"x":-1320,
			"y":1220,
			"width":689,
			"height":360
		},
		{
			"id":"ef6f29101d75d110",
			"styleAttributes":{},
			"text":"#### 세 번째 시도 : 가능한 모든 속성으로 필터링 (정말 마음에 들지 않는 코드..)\n\n```java\npublic static List<Apple> filterGreenApples(List<Apple> inventory, Color color, int weight, booldan flag) {\n\tList<Apple> result = new ArrayList<>();\n\tfor(Apple apple: inventory){\n\t\tif((flag && apple.getColor().equals(color)) ||\n\t\t\t(!flag && apple.getWeight() > weight){\n\t\t\tresult.add(apple);\n\t\t}\n\t}\n\treturn result;\n}\n```",
			"type":"text",
			"x":-1375,
			"y":2320,
			"width":800,
			"height":360
		},
		{
			"id":"73bb7321a5f883a7",
			"styleAttributes":{},
			"text":"#### 자바 함수\n**메서드를 전달할 수 있다는 것**\n\n함수를 값처럼 취급 → 메서드와 람다를 **일급 시민**으로!\n\n#### [[메서드 참조]]\n이 메서드를 값으로 사용하라\n\n#### [[람다 표현식]]\n익명 함수 → 간결한 코드 구현",
			"type":"text",
			"x":-603,
			"y":520,
			"width":283,
			"height":427
		},
		{
			"id":"2eef4f47c40ee434",
			"styleAttributes":{},
			"text":"#### 디폴트 메서드와 자바 모듈\n\n인터페이스를 업데이트하려면 해당 인터페이스를 구현하는 모든 클래스도 업데이트 필요\n\n자바 8 : 디폴트 메서드로 해결\n자바 9 : 모듈로 해결\n\n함수를 값처럼 취급 → 메서드와 람다를 일급 시민으로!\n\n→ 다이아몬드 상속 문제 해결\n\n",
			"type":"text",
			"x":-63,
			"y":520,
			"width":278,
			"height":340
		},
		{
			"id":"e667302364e7e4c8",
			"styleAttributes":{},
			"text":"#### 스트림\n\n내부 반복으로 모든 데이터 처리\n\n컬렉션 : 어떻게 데이터를 저장하고 접근할지에 중점\n\n스트림 : 데이터에 어떤 계산을 할 것인지 묘사",
			"type":"text",
			"x":-328,
			"y":520,
			"width":267,
			"height":298
		},
		{
			"id":"245ee7d9efbf455e",
			"styleAttributes":{"textAlign":"center"},
			"text":"자바 8에서 추가된 새로운 개념",
			"type":"text",
			"x":-535,
			"y":340,
			"width":680,
			"height":60,
			"color":"4"
		},
		{
			"id":"a783ef7b8833534c",
			"styleAttributes":{},
			"text":"#### 람다 표현식\n+ 메서드로 전달할 수 있는 **익명 함수를 단순화**한 것\n+ `익명 / 함수 / 전달성 / 간결성`\n+ 람다 표현식은 **함수형 인터페이스**의 인스턴스로 취급\n\n```java\n(String s) -> s.length()\n\n(Apple a) -> a.getWeight() > 150\n\n(int x, int y) -> {\n\tSystem.out.println(\"Result:\");\n\tSystem.out.println(x+y);\n}\n\n() -> { return \"result\"; } // {} 사용시 명시적으로 return 표현\n\n(Apple a1, Apple A2) a1.getWeight().compareTo(a2.getWeight())\n```\n\n",
			"type":"text",
			"x":990,
			"y":3539,
			"width":1040,
			"height":482
		},
		{
			"id":"a7cb215d41804c76",
			"styleAttributes":{
				"textAlign":null
			},
			"text":"#### 표준 함수형 인터페이스\n|       함수형 인터페이스       |     함수 디스크립터      | 구현 메서드                   | 추가 메서드(디폴드 메서드/정적 메서드)                   |\n| :-------------------: | :---------------: | ------------------------ | ---------------------------------------- |\n|    `Predicate<T>`     |   T -> boolean    | `boolean test(T t)`      | `and()`, `or()`, `negate()`, `isEqual()` |\n|     `Consumer<T>`     |     T -> void     | `void accept(T t)`       | `andThen()`                              |\n|   `Function<T, R>`    |      T -> R       | `R apply(T t)`           | `compose()`, `andThen()`, `identity()`   |\n|     `Supplier<T>`     |     ( ) -> T      | `T get()`                |                                          |\n|  `UnaryOperator<T>`   |      T -> T       | `T apply(T t)`           |                                          |\n|  `BinaryOperator<T>`  |    (T, T) -> T    | `T apply(T t1, T t2)`    | `minBy()`, `maxBy()`                     |\n|  `BiPredicate<L, R>`  | (L, R) -> boolean | `boolean test(L l, R r)` | `and()`, `or()`, `negate()`              |\n|  `BiConsumer<T, U>`   |  (T, U) -> void   | `void accept(T t, U u)`  | `andThen()`                              |\n| `BiFunction<T, U, R>` |    (T, U) -> R    | `R apply(T t, U u)`      | `andThen()`                              |\n\n\n\n> [!question]+ 함수 디스크립터?\n> 함수형 인터페이스의 추상 메서드 시그니처\n\n\n#### 기본형 특화\n+ 오토박싱 과정을 피하는 함수형 인터페이스\n+ `특정 형식` + `함수형 인터페이스`\n+ `IntPredicate`, `LongConsumer` 등",
			"type":"text",
			"x":635,
			"y":4410,
			"width":905,
			"height":790
		},
		{
			"id":"9699b8fde07406ef",
			"styleAttributes":{},
			"text":"#### 함수형 인터페이스\n+ 정확히 **하나의 추상 메서드**를 지정하는 인터페이스\n+ `@FunctionalInterface`",
			"type":"text",
			"x":1300,
			"y":4128,
			"width":420,
			"height":145
		},
		{
			"id":"dd0aca3c8d8596e6",
			"styleAttributes":{},
			"text":"#### 세 번째 시도 : 동작 파라미터화\n\n1.  인터페이스 정의 → 사과 선택 전략 캡슐화(**전략 패턴**)\n```java\npublic interface ApplePredicate{\n\tboolean test (Apple apple);\n}\n```\n\n2. 전략 선택\n```java\npublic class AppleHeavyWeightPredicate implements ApplePredicate{ // 무게 선택\n\tpublic boolean test(Apple apple){\n\t\treturn apple.getWeight() > 150;\n\t}\n}\n\npublic class AppleGreenColorPredicate implements ApplePredicate{ // 색 선택\n\tpublic boolean test(Apple apple){\n\t\treturn GREEN.equals(apple.getColor());\n\t}\n}\n```\n\n3. 추상적 조건으로 필터링 → **한 개의 파라미터, 다양한 동작**\n```java\npublic static List<Apple> filterApples(List<Apple> inventory, ApplePredicate p){\n\tList<Apple> result = new ArrayList<>();\n\tfor(Apple apple: inventory){\n\t\tif(p.test(apple)){\n\t\t\tresult.add(apple);\n\t\t}\n\t}\n\treturn result;\n}\n```",
			"type":"text",
			"x":-340,
			"y":2320,
			"width":800,
			"height":820
		},
		{
			"id":"ad09972374552e9d",
			"styleAttributes":{},
			"text":"#### 메서드 참조\n+ **매개변수가 중복**된다면 제거\n+ 화살표 제거\n+ `.`  을 `::`로 변환\n\n| 람다                                               | 메서드 참조                            |\n| ------------------------------------------------ | --------------------------------- |\n| **(Apple apple)** -> **apple**.getWeight()       | Apple::getWeight                  |\n| **()** -> Thread.currentThread().dumpStack**()** | Thread.currentThread()::dumpStack |\n| **(str, i)** -> **str**.substring**(i)**         | String::substring                 |\n| **(String s)** -> System.out.println**(s)**      | System.out::println               |\n| **(String s)** -> this.isValidName**(s)**        | this::isValidName                 |\n\n#### 생성자 참조\n```java\nClassName::new\n```",
			"type":"text",
			"x":3340,
			"y":3515,
			"width":680,
			"height":530
		},
		{
			"id":"74e49037daf80bbf",
			"styleAttributes":{},
			"text":"#### 네 번째 시도 : 익명 클래스 사용\n\n```java\nList<Apple> redApples = filterApples(inventory, new ApplePredicate(){\n\tpublic boolean test(Apple apple){\n\treturn RED.equals(apple.getColor());\n\t}\n});\n```",
			"type":"text",
			"x":-340,
			"y":3340,
			"width":800,
			"height":220
		},
		{
			"id":"874c69e586d4842f",
			"styleAttributes":{},
			"text":"#### 여섯 번째 시도 : 리스트 형식으로 추상화\n```java\npublic interface Predicate<T>{\n\tboolean test(T t);\n}\n\npublic static <T> List<T> filter(List<T> list, Predicate<T> p){\n\tList<T> result = new ArrayList<>();\n\tfor(T e: list){\n\t\tif(p.test(e)){\n\t\t\tresult.add(e);\n\t\t}\n\t}\n\treturn result;\n}\n```\n\n```java\nList<Apple> redApples = filter(inventory, (Apple apple) -> RED.equals(apple.getColor()));\n```",
			"type":"text",
			"x":-410,
			"y":3960,
			"width":940,
			"height":480
		},
		{
			"id":"f7ac2d06371c2c5c",
			"styleAttributes":{},
			"text":"#### 다섯 번째 시도 : 람다 사용\n\n```java\nList<Apple> result = filterApples(inventory, (Apple apple) -> RED.equals(apple.getColor()));\n```",
			"type":"text",
			"x":-410,
			"y":3700,
			"width":940,
			"height":160
		},
		{
			"id":"1021db4baba2b179",
			"styleAttributes":{"textAlign":"center"},
			"text":"종류",
			"type":"text",
			"x":1460,
			"y":4300,
			"width":100,
			"height":60,
			"color":"4"
		},
		{
			"file":"🟧 Organize 영구노트/🟡 Area 장기적인 책임/JAVA/클래스&객체/제네릭.md",
			"id":"a13c58433d643889",
			"styleAttributes":{},
			"type":"file",
			"x":-340,
			"y":4620,
			"width":800,
			"height":580
		},
		{
			"id":"0119aca709d9c01b",
			"styleAttributes":{},
			"text":"#### Comparator로 정렬\n\n```java\n//java.util.Comparator\npublic interface Comparator<T> {\n\tint compare(T o1, T o2);\n}\n```\n\n```java\ninventory.sort(\n(Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight()));\n```",
			"type":"text",
			"x":2560,
			"y":4410,
			"width":660,
			"height":290
		},
		{
			"id":"5e50b361c696985c",
			"styleAttributes":{},
			"text":"#### 기능적 함수형 인터페이스\n| 함수형 인터페이스       | 함수 디스크립터      | 구현 메서드                      | 역할              |\n| --------------- | ------------- | --------------------------- | --------------- |\n| `Runnable`      | () -> void    | `void run()`                | 쓰레드 생성          |\n| `Callable<V>`   | () -> T       | `V call() throws Exception` | 비동기 작업          |\n| `Comparator<T>` | (T, T) -> int | `int compare(T o1, T o2)`   | 두 객체 순서 비교      |\n| `Comparable<T>` | (T) -> int    | `compareTo(T o)`            | 자신과 다른 객체 순서 비교 |\n",
			"type":"text",
			"x":1540,
			"y":4410,
			"width":760,
			"height":290
		},
		{
			"id":"676d27f47d050116",
			"styleAttributes":{},
			"type":"link",
			"url":"https://devlog-wjdrbs96.tistory.com/201",
			"x":-395,
			"y":5340,
			"width":910,
			"height":620
		},
		{
			"id":"3d68285b857eb33a",
			"styleAttributes":{},
			"text":"#### 메서드 참조\n+ 이 메서드를 값으로 사용하라\n```java\ninvengory.sort(comparing(Apple::getWeight));\n```",
			"type":"text",
			"x":4240,
			"y":4425,
			"width":510,
			"height":260
		},
		{
			"id":"bf7905c8d671f2e2",
			"styleAttributes":{},
			"text":"#### Comparator의 추가 메서드 사용\n```java\ninventory.sort(comparing(Apple::getWeight))\n\t.reversed()\n\t.thenComparing(Apple::getCountry));\n```",
			"type":"text",
			"x":3360,
			"y":4860,
			"width":680,
			"height":180
		},
		{
			"id":"c814da86ae67eb64",
			"styleAttributes":{},
			"text":"#### comparing으로 리팩토링\n```java\nimport static java.util.Comparator.comparing;\ninventory.sort(comparing((apple -> apple.getWeight()));\n```\n\n> [!check]+ comparing\n> 내부적으로 전달 받은 `Function`으로 값을 추출하여 비교하는 `Comparator`를 반환하는 정적 메서드\n",
			"type":"text",
			"x":3400,
			"y":4400,
			"width":680,
			"height":310
		}
	]
}